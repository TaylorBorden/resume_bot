# 🎯 AI Resume Analyzer

A powerful, AI-driven web application that provides professional resume analysis and feedback. Upload your resume in PDF or DOCX format and get detailed, actionable insights to improve your job application success rate.


## ✨ Features

- **🤖 AI-Powered Analysis**: Uses OpenAI GPT-3.5-turbo for intelligent resume review
- **📄 Multiple File Formats**: Supports both PDF and DOCX resume uploads
- **🎨 Modern UI**: Clean, responsive design with drag-and-drop functionality
- **📊 Comprehensive Feedback**: 10-point analysis covering structure, content, and optimization
- **🔒 Secure Processing**: Temporary file handling with automatic cleanup
- **💡 Mock Mode**: Test the application without API costs
- **⚡ Real-time Processing**: Instant feedback with loading indicators



### Analysis Categories

- ✅ **Overall Structure & Format**
- ✅ **Professional Summary/Objective**
- ✅ **Work Experience Descriptions**
- ✅ **Skills Section Optimization**
- ✅ **Education Section Review**
- ✅ **Achievements & Quantifiable Results**
- ✅ **ATS (Applicant Tracking System) Compatibility**
- ✅ **Areas for Improvement**
- ✅ **Key Strengths Identification**
- ✅ **Overall Rating (1-10 Scale)**

## 🚀 Quick Start

### Prerequisites

- Python 3.7 or higher
- OpenAI API key (optional for mock mode)

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/ai-resume-analyzer.git
   cd ai-resume-analyzer
   ```

2. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

3. **Set up environment variables**
   
   **Option A: Environment Variable (Recommended)**
   ```bash
   # Windows PowerShell
   $env:OPENAI_API_KEY='your-openai-api-key-here'
   
   # Windows Command Prompt
   set OPENAI_API_KEY=your-openai-api-key-here
   
   # macOS/Linux
   export OPENAI_API_KEY='your-openai-api-key-here'
   ```
   
   **Option B: .env File**
   ```bash
   # Create .env file in project root
   echo "OPENAI_API_KEY=your-openai-api-key-here" > .env
   ```

4. **Run the application**
   ```bash
   python app.py
   ```

5. **Access the application**
   
   Open your browser and navigate to: `http://localhost:5000`

## 🧪 Testing Without OpenAI API

Want to test the application without API costs? Enable mock mode:

```bash
# Windows PowerShell
$env:USE_MOCK='true'

# Windows Command Prompt
set USE_MOCK=true

# macOS/Linux
export USE_MOCK=true
```

Or add to your `.env` file:
```
USE_MOCK=true
```

## 📁 Project Structure

```
ai-resume-analyzer/
├── app.py                 # Main Flask application
├── requirements.txt       # Python dependencies
├── .env                  # Environment variables (optional)
├── README.md             # Project documentation
└── uploads/              # Temporary file storage (auto-created)
```

## 🛠️ Configuration

### Environment Variables

| Variable | Description | Required | Default |
|----------|-------------|----------|---------|
| `OPENAI_API_KEY` | Your OpenAI API key | No* | None |
| `USE_MOCK` | Enable mock mode for testing | No | `false` |

*Required for AI analysis; optional if using mock mode

### File Upload Limits

- **Supported Formats**: PDF, DOCX
- **Maximum File Size**: 16MB
- **Processing**: Automatic text extraction and cleanup

## 🔧 API Endpoints

### `GET /`
Serves the main HTML interface

### `POST /upload`
Handles resume file upload and analysis

**Request:**
- Method: `POST`
- Content-Type: `multipart/form-data`
- Body: File upload with key `resume`

**Response:**
```json
{
  "success": true,
  "filename": "resume.pdf",
  "feedback": "Detailed AI analysis..."
}
```

## 🎨 User Interface

### Features
- **Drag & Drop**: Intuitive file upload experience
- **Responsive Design**: Works on desktop, tablet, and mobile
- **Loading States**: Visual feedback during processing
- **Error Handling**: User-friendly error messages
- **Results Display**: Formatted, easy-to-read feedback

### Browser Compatibility
- Chrome 60+
- Firefox 55+
- Safari 12+
- Edge 79+

## 🔒 Security Features

- **File Type Validation**: Only PDF and DOCX files accepted
- **File Size Limits**: Prevents large file uploads
- **Temporary Storage**: Files automatically deleted after processing
- **Input Sanitization**: Prevents malicious file uploads
- **CORS Protection**: Secure cross-origin requests

## 📊 Sample Analysis Output

```
📋 RESUME ANALYSIS REPORT

⭐ OVERALL RATING: 8.2/10

📝 STRUCTURE & FORMAT
✅ Strengths:
- Professional layout with clear sections
- Consistent formatting throughout
- Appropriate length for experience level

💼 WORK EXPERIENCE
⚠️ Areas for Improvement:
- Add quantifiable achievements (numbers, percentages)
- Use stronger action verbs
- Include specific technologies used

🎯 KEY RECOMMENDATIONS:
1. Quantify achievements with specific metrics
2. Tailor keywords to target job descriptions
3. Strengthen professional summary
4. Add relevant technical skills
```

## 🚀 Deployment

### Local Development
```bash
python app.py
# Runs on http://localhost:5000
```

### Production Deployment

**Using Gunicorn:**
```bash
pip install gunicorn
gunicorn -w 4 -b 0.0.0.0:8000 app:app
```

**Using Docker:**
```dockerfile
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
EXPOSE 5000

CMD ["python", "app.py"]
```

### Cloud Deployment Options
- **Heroku**: Ready for Heroku deployment
- **AWS Elastic Beanstalk**: Python platform compatible
- **Google Cloud Platform**: App Engine ready
- **DigitalOcean App Platform**: Direct GitHub deployment


## 🆘 Troubleshooting

### Common Issues

**1. OpenAI API Error (429 - Quota Exceeded)**
```
Solution: Add credits to your OpenAI account or enable mock mode
```

**2. File Upload Not Working**
```
Check file format (PDF/DOCX only) and size (max 16MB)
```

**3. Text Extraction Failed**
```
Ensure PDF is not password-protected or image-only
```

**4. Port Already in Use**
```bash
# Kill existing process or use different port
python app.py --port 5001
```

### Getting Help

- 📖 [OpenAI API Documentation](https://platform.openai.com/docs)
- 🐛 [Report Issues](https://github.com/yourusername/ai-resume-analyzer/issues)
- 💬 [Discussions](https://github.com/yourusername/ai-resume-analyzer/discussions)

## 🎯 Roadmap

### Upcoming Features
- [ ] User authentication and resume history
- [ ] Batch processing for multiple resumes
- [ ] Industry-specific analysis templates
- [ ] Resume comparison tools
- [ ] Export analysis to PDF
- [ ] Integration with job boards
- [ ] Multi-language support

### Performance Improvements
- [ ] Async file processing
- [ ] Redis caching for frequent requests
- [ ] Database integration for analytics
- [ ] API rate limiting
- [ ] Health monitoring dashboard

## 👥 Authors

- **Your Name** - *Initial work* - [YourGitHub](https://github.com/yourusername)

## 🙏 Acknowledgments

- OpenAI for providing the GPT-3.5-turbo API
- Flask community for the excellent web framework
- PyPDF2 and python-docx contributors
- All beta testers and contributors

## 📞 Support

If you found this project helpful, please consider:
- ⭐ Starring the repository
- 🐛 Reporting bugs
- 💡 Suggesting new features
- 🤝 Contributing to the codebase

---
